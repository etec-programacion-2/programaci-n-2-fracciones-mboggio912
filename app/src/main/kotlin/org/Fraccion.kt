/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

class Fraccion(
    private var _numerador: Int = 0,
    private var _denominador: Int = 1
) {
    init {
        if (_denominador == 0) {
            throw IllegalArgumentException("El denominador no puede ser cero")
        }
        // Simplificar la fracci贸n al crearla
        simplificar()
    }

    var numerador: Int
        get() = _numerador
        set(value) {
            _numerador = value
        }

    var denominador: Int
        get() = _denominador
        set(value) {
            if (value == 0) throw IllegalArgumentException("El denominador no puede ser cero")
            _denominador = value
        }

    override fun toString(): String {
        return when {
            denominador == 1 -> "$numerador"
            numerador == 0 -> "0"
            else -> "$numerador/$denominador"
        }
    }

    fun mostrar() {
        println("$numerador/$denominador")
    }

    operator fun plus(otra: Fraccion): Fraccion {
        val nuevoNumerador = this.numerador * otra.denominador + this.denominador * otra.numerador
        val nuevoDenominador = this.denominador * otra.denominador
        val resultado = Fraccion(nuevoNumerador, nuevoDenominador)
        resultado.simplificar()
        return resultado
    }

    operator fun minus(otra: Fraccion): Fraccion {
        val nuevoNumerador = this.numerador * otra.denominador - this.denominador * otra.numerador
        val nuevoDenominador = this.denominador * otra.denominador
        val resultado = Fraccion(nuevoNumerador, nuevoDenominador)
        resultado.simplificar()
        return resultado
    }

    // ETAPA 3: Operador multiplicaci贸n
    operator fun times(otra: Fraccion): Fraccion {
        val nuevoNumerador = this.numerador * otra.numerador
        val nuevoDenominador = this.denominador * otra.denominador
        val resultado = Fraccion(nuevoNumerador, nuevoDenominador)
        resultado.simplificar()
        return resultado
    }

    // ETAPA 3: Operador divisi贸n
    operator fun div(otra: Fraccion): Fraccion {
        // Validar que no se divida por cero
        if (otra.numerador == 0) {
            throw IllegalArgumentException("No se puede dividir por una fracci贸n con numerador cero")
        }
        
        // (a/b) / (c/d) = (a*d)/(b*c)
        val nuevoNumerador = this.numerador * otra.denominador
        val nuevoDenominador = this.denominador * otra.numerador
        val resultado = Fraccion(nuevoNumerador, nuevoDenominador)
        resultado.simplificar()
        return resultado
    }

    private fun simplificar() {
        val mcd = calcularMCD(kotlin.math.abs(numerador), kotlin.math.abs(denominador))
        if (mcd > 1) {
            _numerador /= mcd
            _denominador /= mcd
        }
        // Manejar el signo: el denominador siempre debe ser positivo
        if (_denominador < 0) {
            _numerador = -_numerador
            _denominador = -_denominador
        }
    }

    private fun calcularMCD(a: Int, b: Int): Int {
        return if (b == 0) a else calcularMCD(b, a % b)
    }
}